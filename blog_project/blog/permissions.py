from rest_framework import permissions

class IsAuthorOrReadOnly(permissions.BasePermission):
    """
    Разрешает редактировать и удалять посты только автору.
    Также запрещает доступ для неавторизованных пользователей даже для чтения.

    Проверяется, является ли текущий пользователь автором поста. Если это не так,
    доступ к редактированию или удалению будет запрещен. Для чтения доступ разрешен
    только авторизованным пользователям.
    """

    def has_object_permission(self, request, view, obj):
        """
        Проверка прав доступа к объекту.

        Этот метод проверяет, может ли текущий пользователь выполнить операцию с объектом.
        Для безопасных методов (GET, HEAD, OPTIONS) разрешен доступ, если пользователь авторизован.
        Для остальных методов проверяется, является ли пользователь автором данного объекта.

        Аргументы:
        - request: Запрос, который поступил от пользователя.
        - view: Вид, к которому выполняется запрос.
        - obj: Объект, к которому проверяются права доступа.

        Возвращаемое значение:
        - Возвращает True, если доступ разрешён, и False, если доступ запрещён.
        """
        if request.method in permissions.SAFE_METHODS:
            # Если запрос на чтение, проверяем, что пользователь авторизован
            if request.user.is_authenticated:
                return True
            return False  # Если пользователь не авторизован, доступ к чтению запрещен

        # Проверяем, является ли текущий пользователь автором поста
        return obj.author == request.user

