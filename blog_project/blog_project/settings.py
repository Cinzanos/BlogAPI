"""
Django settings for blog_project project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-un3j(1e5y&7=-a)gs57hb$hy^t_2b%8-cd_6_ogpir^6)&bs@h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # Устанавливаем в False для production-среды

ALLOWED_HOSTS = []  # Указать разрешенные хосты для продакшн-сервера

# Application definition
# Здесь перечислены приложения, которые используются в проекте
INSTALLED_APPS = [
    'django.contrib.admin',  # Админ панель Django
    'django.contrib.auth',  # Аутентификация и авторизация
    'django.contrib.contenttypes',  # Обработка типов контента
    'django.contrib.sessions',  # Обработка сессий
    'django.contrib.messages',  # Сообщения для пользователя
    'django.contrib.staticfiles',  # Статические файлы (CSS, JS и т.д.)
    'rest_framework',  # Django Rest Framework для создания API
    'django_filters',  # Для фильтрации в API
    'blog',  # Приложение для блога
    'drf_yasg', # Swagger
]

# Middleware
# Список промежуточного ПО для обработки запросов и ответов
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Защита сайта
    'django.contrib.sessions.middleware.SessionMiddleware',  # Сессии
    'django.middleware.common.CommonMiddleware',  # Общие middleware
    'django.middleware.csrf.CsrfViewMiddleware',  # Защита от CSRF-атак
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Аутентификация пользователя
    'django.contrib.messages.middleware.MessageMiddleware',  # Сообщения для пользователя
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Защита от clickjacking
]

ROOT_URLCONF = 'blog_project.urls'  # Корневой файл конфигурации URL

# Templates
# Конфигурация для шаблонов Django
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # Используем стандартный шаблонизатор Django
        'DIRS': [BASE_DIR / 'templates'],  # Пути к пользовательским шаблонам (пустой список означает использование шаблонов в приложениях)
        'APP_DIRS': True,  # Используем директории шаблонов в каждом приложении
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',  # Обработчик для отладки
                'django.template.context_processors.request',  # Обработчик для запросов
                'django.contrib.auth.context_processors.auth',  # Обработчик для аутентификации
                'django.contrib.messages.context_processors.messages',  # Обработчик для сообщений
            ],
        },
    },
]

WSGI_APPLICATION = 'blog_project.wsgi.application'  # Приложение для WSGI сервера

# Database
# Конфигурация базы данных для проекта (SQLite используется в данном случае)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # Используем SQLite
        'NAME': BASE_DIR / 'db.sqlite3',  # Файл базы данных находится в корне проекта
    }
}

# Caching
# Конфигурация кэширования с использованием Redis
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',  # Используем Redis для кэширования
        'LOCATION': 'redis://127.0.0.1:6379/1',  # Адрес Redis
    }
}

# Password validation
# Валидация паролей пользователей
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # Проверка на схожесть атрибутов
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # Минимальная длина пароля
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # Проверка на распространенность пароля
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # Проверка на числовые пароли
    },
]

# Internationalization
# Конфигурация для локализации
LANGUAGE_CODE = 'en-us'  # Устанавливаем язык по умолчанию

TIME_ZONE = 'UTC'  # Устанавливаем часовой пояс

USE_I18N = True  # Включаем поддержку интернационализации

USE_TZ = True  # Включаем использование часовых поясов

# Static files
# Конфигурация для работы со статическими файлами (CSS, JS и т.д.)
STATIC_URL = 'static/'  # URL для доступа к статическим файлам

# Default primary key field type
# Устанавливаем тип поля для идентификаторов моделей
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
# Конфигурация для Django Rest Framework (DRF)
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',  # Устанавливаем разрешения для аутентифицированных пользователей
    ),
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',  # Отображение в формате JSON
        'rest_framework.renderers.BrowsableAPIRenderer',  # Просматриваемый API
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # Пагинация
    'PAGE_SIZE': 5,  # Размер страницы
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Используем JWT для аутентификации
    ],
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization',
            'description': 'JWT authorization header using the Bearer schema. Example: "Authorization: Bearer <JWT>"'
        }
    }
}
